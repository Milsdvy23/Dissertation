import matplotlib.pyplot as plt
from matplotlib.patches import Patch
import cartopy.crs as ccrs
from cartopy.io.img_tiles import OSM
from flask import Flask, jsonify, request, render_template_string
from flask_cors import CORS
from openai import OpenAI
import os

client = OpenAI(
    api_key=os.environ.get("OPEN_API_KEY"),
)
    
# ELM Function
def askELM(input_text):
    completion = client.chat.completions.create(
        messages=[
            {"role": "system",
             "content": "You are a map generation service."
             },
             {
                 "role":"user",
                 "content":str(input_text),
             }
        ],
        model="gpt-4-turbo",
    )
    return completion.choices[0].message.content

# function to clean coordinates
def clean_coord(input_file):
        Coord = {}
        Place = None
        Latcoord = []
        Longcoord = []

        try:
            with open(input_file, 'r') as file:

                for line in file:
                    # strip of white space
                    line = line.strip()
                    # if a character is not a digit
                    if not any(char.isdigit() for char in line):
                        # strip of white space
                        Place = line.strip()
                        # make sure list is empty to enable multiple coordinates being plotted
                        Latcoord = []
                        Longcoord = []
                    # if line
                    elif line:
                        # replace all extra coordinate characters so coordinates can be read by cartopy
                        line = line.replace('Â°', '').replace('N', '').replace('W', '').replace('S', '').replace('E', '')
                        try:
                            # splits line and turns into float
                            Lat, Long = map(float, line.split())
                            # accomodates for western hemisphere values as this function creates Scottish maps
                            Long = -Long
                            # appends coordinates to lists
                            Latcoord.append(Lat)
                            Longcoord.append(Long)
                        except ValueError:
                            continue
                    # adds to dictionary as 'PlaceName: Coordinate Data'
                    Coord[Place] = (Latcoord, Longcoord)
        except FileNotFoundError:
            return ({"error": "File not available"})

        return (Coord)

# function to dynamically calcuate the extent of the given coordinates 
def calculate_extent(Coord):
        all_latitude = []
        all_longitude = []
        for latitudes, longitudes in Coord.values():
            all_latitude.extend(latitudes)
            all_longitude.extend(longitudes)

        min_latitude = min(all_latitude) - 0.01
        max_latitude = max(all_latitude) + 0.01
        min_longitude = min(all_longitude) - 0.01
        max_longitude = max(all_longitude) + 0.01

        return [min_longitude, max_longitude, min_latitude, max_latitude]

# function to plot the map using cartopy
def plot_map(Coord, extent):
    
        # making sure it is in the British Coordinate System
        bng = ccrs.OSGB()
        
        # Using OSM Base Layer
        map_image = OSM()
        
        # setting figure size
        fig = plt.figure(figsize=(15, 20))
        
        ax = fig.add_subplot(1, 1, 1, projection=bng)
        ax.set_extent(extent, crs=ccrs.PlateCarree())
        ax.add_image(map_image, 14, alpha=0.6)
        
        # setting map colour
        map_colour = plt.cm.get_cmap('tab20', len(Coord))
        legend_names = []
        
        # for every location and associated latitude and longitude set a colour
        for index, (location, (latitudes, longitudes)) in enumerate(Coord.items()):
            colour = map_colour(index)
            
            # setting marker size and plotting markers
            for latitude, longitude in zip(latitudes, longitudes):
                ax.plot(longitude, latitude, 'o', transform=ccrs.PlateCarree(), color=colour, markersize=10)
            
            # setting legend names based on location provided
            legend_names.append(Patch(facecolor=colour, edgecolor='black', label=f'{index + 1} = {location.strip()}'))
        
        # formatting legend
        ax.legend(handles=legend_names, title='Areas', loc='lower center', handleheight=1, framealpha=0.8, 
                fontsize='xx-small', ncol=1, bbox_to_anchor=(0.5, -0.1))
        
        # setting title
        ax.set_title('Map')
        
        # plotting map
        plt.show()

# function to activate all the previous functions and incorporate AI interface
def create_app():
    app = Flask(__name__)
    CORS(app)

    @app.route("/", methods=["GET"])
    def home():
        html_content = """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Map Request Form</title>
        </head>
        <body>
            <h1>Request a Map</h1>
            <form action="/chat" method="post">
                <br><br>
                <label for="prompt">Prompt:</label>
                <input type="text" id="prompt" name="prompt" required>
                <br><br>
                <button type="submit">Submit</button>
            </form>
        </body>
        </html>
        """
        return render_template_string(html_content)
        
    
    @app.route("/chat", methods=["POST"])
    def create_map():
        try:
            prompt = prompt = request.form.get('prompt', '')
            response = askELM(prompt)
            Coord = clean_coord('DataFile')
            

            if prompt == '':
                return {
                    "response": "ERROR",
                    "message": 'you did not ask anything'
                }, 400

            if isinstance(Coord, dict) and "error" in Coord:
                return jsonify(Coord), 404

            location_request = prompt.lower().replace("create a map of", "").strip()
            matching_places = {place: coords for place, coords in Coord.items() if place.lower() == location_request}

            if matching_places:
                extent = calculate_extent(matching_places)
                plot_map(matching_places, extent)
                return {
                    'sender': 'chatbot',
                    'text': f"{response} The map for {location_request} has been created.",
                }
            else:
                return {
                    'sender': 'chatbot',
                    'text': f"{response} Place not found. Please specify a valid location."
                }
                
        except Exception as e:
            return {
                "response": "ERROR",
                "message": str(e)
            }, 500

    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)
